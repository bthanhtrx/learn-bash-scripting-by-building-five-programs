builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionaire.sh
touch questionnaire.sh
ls --color=auto
rm questionaire.sh
ls --color=auto
__vsc_prompt_cmd_original
./qu
./ questionnaire.sh
./\questionnaire.sh
./questionnaire.sh
sh questionnaire.sh
bash questionnaire.sh
which bash
sh questionnaire.sh
./qu
./questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
ls --color=auto -l
./questionnaire.sh
ls --color=auto -l
__vsc_prompt_cmd_original
ls --color=auto -l
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
echo --help
man echo
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
touch countdown.sh
chmod +x countdown.sh
./countdown.sh
./countdown.sh hello 10 20
./countdown.sh hello 10 20
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
hlep
help
man
man if
help if
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
help if
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
1 == 0
0 == 0
[[ 0 == 0 ]]
ls --color=auto
./countdown.sh
./countdown.sh arg1
./countdown.sh arg
./countdown.sh arg
./countdown.sh arg
./countdown.sh 4
./countdown.sh 5
help if
hlep
help
help [[ expression ]]
[[ 1 > 2 ]]
[[ 1 -lt 2 ]]
echo [[ 1 -lt 2 ]]
help test
__vsc_prompt_cmd_original
./countdown.sh 5
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
[[ 4 -ge 5 ]]
[[ 10 -ne 5 ]]
bad_command
[[ 10 -ne 511 ]]
bad_command
ls --color=auto
ls --color=auto
ls --color=auto -y
ls --color=auto -y
help test
[[ -a countdown.sh ]]
[[ -a bad_file.txt ]]
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
help test
__vsc_prompt_cmd_original
-a bad_file.txt
[[ -a bad_file.txt ]]
[[ -a bad_file.txt ]]
[[ -x countdown.sh ]]
[[ -x countdown.sh ]]
__vsc_prompt_cmd_original
help [[ expression ]]
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh && 5 -le 4 ]]
help [[
__vsc_prompt_cmd_original
[[ -x countdown.sh || 5 -le 4 ]]
./countdown.sh 1
./countdown.sh oeu
hlep
help
./countdown.sh 10
help
ls --color=auto /
ls --color=auto /bin
man sleep
man sleep
sleep 3
.lcountdown.sh 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
hlep while
help while
./countdown.sh 6
./countdown.sh 5
./countdown.sh 2
./countdown.sh 2
./countdown.sh 2
./countdown.sh 2
./countdown.sh 2
./countdown.sh 2
touch bingo.sh
chmod +x bingo.sh
./bingo.sh
printenv
echo LANG
echo $LANG
declare -p
echo $RANDOM
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
I=0
S =10
echo $I
(( I++ ))
echo $I
help let
let
let i = 10
let i=10
echo $i
(( i += 10 ))
(( I+= 10 ))
echo $I
$(( I + 4 ))
ech o$(( I + 4 ))
echo $(( I + 4 ))
echo $I
J=$((I -6))
echo $J
echo $(( J bingo.sh countdown.sh questionnaire.sh 5 + 25))
echo $J
declare -p
declare -p J
declare -p RANDOM
echo $((RANDOM % 75))
echo $((RANDOM % 75 + 1))
__vsc_prompt_cmd_original
./bingo.sh
./bingo.sh
builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
__vsc_prompt_cmd_original
__vsc_prompt_cmd_original
help let
